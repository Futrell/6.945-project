;;; Church code for a simple pragmatic communication model.
;;; This should be interoperable with our interface (if we can get
;;; Scheme to call Church code!). I'll try a few non-Church
;;; implementations of this too.

;;; Assume a base production model (lexicon) where the speaker just
;;; says some feature describing an object. We'll build from there.

(define (sample-universe-event)
  (uniform-draw universe))

(define (match-procedure thing-to-query thing-to-get)
  (define (matches alist thing)
    (define (find-matches alist found-so-far)
      (if (null? alist)
          found-so-far
          (let ((first-pair (first alist)))
            (if (eq? (thing-to-query first-pair) thing)
                (find-matches (rest alist)
                              (pair (thing-to-get first-pair) found-so-far))
                (find-matches (rest alist)
                              found-so-far)))))
    (find-matches alist '()))
  matches)

(define matches (match-procedure first second))
(define reverse-matches (match-procedure second first))

(define (make-literal-speaker lexicon)
  ;; Associate meanings to words.
  (lambda (meaning)
    (uniform-draw (matches lexicon meaning))))

(define (make-literal-listener lexicon)
  ;; Associate words to meanings.
  (lambda (message)
    (uniform-draw (reverse-matches lexicon meaning))))

(define (make-pragmatic-listener meaning->messsage)
  ;; Infer the meaning of a message using Church's query form.
  (lambda (message)
    (query
      (define intended-meaning (sample-universe-event))
      intended-meaning
      (eq? (meaning->message intended-meaning) message))))

(define (make-pragmatic-speaker message->meaning meaning->message)
  ;; Sample from the softmax of the listener's posterior distribution.
  ;; I don't know how to do softmax in Church so I'll just do a Monte
  ;; Carlo approximation of the listener's posterior and then
  ;; rejection sampling from that. This is going to be horrifyingly
  ;; slow. (The Smith paper uses importance sampling.) But the Church
  ;; code is conceptual anyway...
  (lambda (meaning)
    (query
     (define message (meaning->message (sample-universe-event)))
     message
     (eq? (message->meaning message) meaning))))
