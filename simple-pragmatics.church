;;; Church code for a simple pragmatic communication model as in
;;; Smith, Goodman, and Frank (2013).
;;;
;;; Since the existing Church implementations are very slow, I have
;;; not been able to test this code except for very simple cases. It
;;; is more useful as a conceptual framework than as a working
;;; implementation. 

;;; We assume a universe which is a list of events. Events are drawn
;;; from the universe uniformly. 
(define (sample-universe-event)
  (uniform-draw universe))

;;; These are procedures that will be useful for the literal agents.
(define (match-procedure thing-to-query thing-to-get)
  (define (matches alist thing)
    (define (find-matches alist found-so-far)
      (if (null? alist)
          found-so-far
          (let ((first-pair (first alist)))
            (if (eq? (thing-to-query first-pair) thing)
                (find-matches (rest alist)
                              (pair (thing-to-get first-pair) found-so-far))
                (find-matches (rest alist)
                              found-so-far)))))
    (find-matches alist '()))
  matches)

(define matches (match-procedure first second))
(define reverse-matches (match-procedure second first))

;;; This is a speaker (meaning->message procedure) who just says
;;; things that are literally true by consulting a lexicon. If there
;;; are multiple appropriate words in the lexicon, this speaker
;;; chooses among those uniformly at random.
(define (make-literal-speaker lexicon)
  (lambda (meaning)
    (uniform-draw (matches lexicon meaning))))

;;; This is a listener (message->meaning procedure) that just looks up
;;; the meaning of a message in a lexicon. If there are multiple
;;; meanings matching the message, this listener chooses a meaning
;;; uniformly at random.
(define (make-literal-listener lexicon)
  (lambda (message)
    (uniform-draw (reverse-matches lexicon message))))

;;; This is a listener (message->meaning procedure) who figures out
;;; the meaning of a message by inferring the most likely meaning that
;;; would have produced this message according to the meaning->message
;;; procedure which we pass in.
(define (make-pragmatic-listener meaning->message)
  (lambda (message)
    (query
      (define intended-meaning (sample-universe-event))
      intended-meaning
      (eq? (meaning->message intended-meaning) message))))

;;; This is a speaker (meaning->message procedure) who figures out the
;;; message that a hearer (the message->meaning procedure that you
;;; pass in) would be most likely to interpret as the intended
;;; meaning. That is, this speaker takes a meaning and samples a
;;; message according to the probability that a hearer will interpret
;;; the message as that meaning. In the original paper, the speaker
;;; actually samples from the softmax of that distribution. I do not
;;; perform that optimization here.
(define (make-pragmatic-speaker message->meaning meaning->message)
  (lambda (meaning)
    (query
     (define message (meaning->message (sample-universe-event)))
     message
     (eq? (message->meaning message) meaning))))


